@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"

@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active"
            aria-current="page">
            Search
        </li>
    </ol>
</nav>

<h3>Search Results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" 
    MaxLength="MaxLength" 
    MaxTime="MaxTime" />

@if(_searchResults == null)
{
    <p>Loading Search Results....</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}

@code {
    private IEnumerable<Trail>? _searchResults;
    private IEnumerable<Trail> _cachedSearchResults = Array.Empty<Trail>();
    private Trail? _selectedTrail;

    [Parameter]
    public string SearchTerm { get; set; } = default!;

    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            _searchResults = allTrails!.Where(t => t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _cachedSearchResults = _searchResults;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }
    }

    protected override void OnParametersSet()
    {
        UpdateFilters();
        
        @*if(_cachedSearchResults.Any() && MaxLength.HasValue)
        {
            _searchResults = _cachedSearchResults.Where(t => t.Length <= MaxLength);
        }
        else if (_cachedSearchResults.Any()
            && MaxLength is null)
        {
            _searchResults = _cachedSearchResults;
        }*@
    }

    private void HandleTrailSelected(Trail trail) => _selectedTrail = trail;

    private void UpdateFilters()
    {
        var filters = new List<Func<Trail, bool>>();
            
        if (MaxLength is not null && MaxLength > 0)
        {
            filters.Add(t => t.Length <= MaxLength);
        }

        if (MaxTime is not null && MaxTime > 0)
        {
            filters.Add(t => t.TimeInMinutes <= MaxTime * 60);
        }
        
        if (filters.Any())
        {
            _searchResults = _cachedSearchResults.Where(trail => filters.All(filter => filter(trail)));
        }
        else
        {
            _searchResults = _cachedSearchResults;
        }
    }
}
